"""Create initial database schema

Revision ID: 87dde712e019
Revises: 
Create Date: 2025-05-16 05:53:58.420366

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql  # Assuming PostgreSQL, adjust if using another dialect for UUID

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "87dde712e019"  # Keep the actual generated revision ID
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "workflows",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("version", sa.String(length=50), nullable=True),
        sa.Column("step_count", sa.Integer(), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("default_parameters", sa.JSON(), nullable=True),
        sa.Column("tags", sa.JSON(), nullable=True),
        sa.Column("owner_id", sa.String(length=255), nullable=True),
        sa.Column("custom_metadata", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_workflows_name"), "workflows", ["name"], unique=False)

    op.create_table(
        "datasets",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("data_type", sa.String(length=100), nullable=True),
        sa.Column("source_path", sa.Text(), nullable=True),
        sa.Column("custom_metadata", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )

    op.create_table(
        "workflow_step_definitions",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("workflow_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("step_id_in_workflow", sa.String(length=255), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("function_identifier", sa.String(length=512), nullable=True),
        sa.Column("default_parameters", sa.JSON(), nullable=True),
        sa.Column("dependencies", sa.JSON(), nullable=True),
        sa.Column("retry_count", sa.Integer(), nullable=True),
        sa.Column("timeout_seconds", sa.Integer(), nullable=True),
        sa.Column("estimated_memory_mb", sa.Integer(), nullable=True),
        sa.Column("estimated_duration_seconds", sa.Integer(), nullable=True),
        sa.Column("priority", sa.Integer(), nullable=True),
        sa.Column("use_gpu", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["workflow_id"],
            ["workflows.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_workflow_step_definitions_workflow_id"), "workflow_step_definitions", ["workflow_id"], unique=False
    )

    op.create_table(
        "workflow_runs",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("workflow_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "status",
            sa.Enum("PENDING", "RUNNING", "COMPLETED", "FAILED", "CANCELLED", "TIMEOUT", "SKIPPED", name="statusenum"),
            nullable=False,
        ),
        sa.Column("parameters", sa.JSON(), nullable=True),
        sa.Column("results", sa.JSON(), nullable=True),
        sa.Column("artifacts", sa.JSON(), nullable=True),
        sa.Column("logs_summary", sa.Text(), nullable=True),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("duration_seconds", sa.Float(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("error_traceback", sa.Text(), nullable=True),
        sa.Column("triggered_by", sa.String(length=255), nullable=True),
        sa.Column("custom_metadata", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["workflow_id"],
            ["workflows.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_workflow_runs_status"), "workflow_runs", ["status"], unique=False)
    op.create_index(op.f("ix_workflow_runs_workflow_id"), "workflow_runs", ["workflow_id"], unique=False)

    op.create_table(
        "workflow_scheduled_run",  # Name from your models.py
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("workflow_id", postgresql.UUID(as_uuid=True), nullable=False),  # Assuming workflow.id is UUID
        sa.Column("parameters", sa.JSON(), nullable=True),
        sa.Column("schedule_time", sa.DateTime(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),  # Default handled by model
        sa.Column("executed_at", sa.DateTime(), nullable=True),
        sa.Column("run_id", postgresql.UUID(as_uuid=True), nullable=True),  # Assuming workflow_run.id is UUID
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["workflow_runs.id"],
        ),
        # Assuming workflow_id in WorkflowScheduledRun refers to workflows.id
        sa.ForeignKeyConstraint(
            ["workflow_id"],
            ["workflows.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_workflow_scheduled_run_id"), "workflow_scheduled_run", ["id"], unique=False)

    op.create_table(
        "analysis_results",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("workflow_run_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("dataset_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("result_type", sa.String(length=100), nullable=True),
        sa.Column("storage_path", sa.Text(), nullable=True),
        sa.Column("custom_metadata", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["workflow_run_id"],
            ["workflow_runs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "workflow_step_runs",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("workflow_run_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("step_definition_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("step_id_in_workflow", sa.String(length=255), nullable=False),
        sa.Column(
            "status",
            sa.Enum("PENDING", "RUNNING", "COMPLETED", "FAILED", "CANCELLED", "TIMEOUT", "SKIPPED", name="statusenum"),
            nullable=False,
        ),
        sa.Column("parameters_used", sa.JSON(), nullable=True),
        sa.Column("result", sa.JSON(), nullable=True),
        sa.Column("artifacts_produced", sa.JSON(), nullable=True),
        sa.Column("logs", sa.Text(), nullable=True),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("duration_seconds", sa.Float(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("error_traceback", sa.Text(), nullable=True),
        sa.Column("retry_attempt", sa.Integer(), nullable=True),
        sa.Column("host_machine", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["step_definition_id"],
            ["workflow_step_definitions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["workflow_run_id"],
            ["workflow_runs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_workflow_step_runs_status"), "workflow_step_runs", ["status"], unique=False)
    op.create_index(
        op.f("ix_workflow_step_runs_step_id_in_workflow"), "workflow_step_runs", ["step_id_in_workflow"], unique=False
    )
    op.create_index(
        op.f("ix_workflow_step_runs_workflow_run_id"), "workflow_step_runs", ["workflow_run_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_workflow_step_runs_workflow_run_id"), table_name="workflow_step_runs")
    op.drop_index(op.f("ix_workflow_step_runs_step_id_in_workflow"), table_name="workflow_step_runs")
    op.drop_index(op.f("ix_workflow_step_runs_status"), table_name="workflow_step_runs")
    op.drop_table("workflow_step_runs")

    op.drop_table("analysis_results")

    op.drop_index(op.f("ix_workflow_scheduled_run_id"), table_name="workflow_scheduled_run")
    op.drop_table("workflow_scheduled_run")

    op.drop_index(op.f("ix_workflow_runs_workflow_id"), table_name="workflow_runs")
    op.drop_index(op.f("ix_workflow_runs_status"), table_name="workflow_runs")
    op.drop_table("workflow_runs")

    op.drop_index(op.f("ix_workflow_step_definitions_workflow_id"), table_name="workflow_step_definitions")
    op.drop_table("workflow_step_definitions")

    op.drop_table("datasets")

    op.drop_index(op.f("ix_workflows_name"), table_name="workflows")
    op.drop_table("workflows")
    # ### end Alembic commands ###
